rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Username reservations
    match /usernames/{username} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        !exists(/databases/$(database)/documents/usernames/$(username));
    }
    
    // Groups
    match /groups/{groupId} {
      // Allow reading all groups for listing
      allow read: if request.auth != null;
      
      // Allow creating new groups
      allow create: if request.auth != null;
      
      // Allow updating groups (for joining)
      allow update: if request.auth != null && (
        // Allow if user is already a member
        (resource.data.members.hasAny([request.auth.uid])) ||
        // Or if they're joining with correct code and password
        (
          resource.data.code == request.resource.data.code &&
          resource.data.password == request.resource.data.password &&
          request.resource.data.members.hasAll(resource.data.members) &&
          request.resource.data.members.hasAll([request.auth.uid])
        )
      );

      // Allow deleting groups
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow create: if request.auth != null && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow delete: if request.auth != null && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.createdBy == request.auth.uid;
      }
    }
  }
} 